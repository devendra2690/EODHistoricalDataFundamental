/*
 * EODHistoricalDataFundamentalLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.eodhistoricaldata.controllers;

import com.eodhistoricaldata.ApiHelper;
import com.eodhistoricaldata.AuthManager;
import com.eodhistoricaldata.Configuration;
import com.eodhistoricaldata.exceptions.ApiException;
import com.eodhistoricaldata.http.Headers;
import com.eodhistoricaldata.http.client.HttpClient;
import com.eodhistoricaldata.http.client.HttpContext;
import com.eodhistoricaldata.http.request.HttpRequest;
import com.eodhistoricaldata.http.response.HttpResponse;
import com.eodhistoricaldata.http.response.HttpStringResponse;
import com.eodhistoricaldata.models.FundamentalResponse;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public APIController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @return    Returns the FundamentalResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public FundamentalResponse fundamentalResponse() throws ApiException, IOException {
        HttpRequest request = buildFundamentalResponseRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleFundamentalResponseResponse(context);
    }

    /**
     * @return    Returns the FundamentalResponse response from the API call
     */
    public CompletableFuture<FundamentalResponse> fundamentalResponseAsync() {
        return makeHttpCallAsync(() -> buildFundamentalResponseRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleFundamentalResponseResponse(context));
    }

    /**
     * Builds the HttpRequest object for fundamentalResponse.
     */
    private HttpRequest buildFundamentalResponseRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/fundamentals/AAPL.US?api_token=demo");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for fundamentalResponse.
     * @return An object of type FundamentalResponse
     */
    private FundamentalResponse handleFundamentalResponseResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        FundamentalResponse result = ApiHelper.deserialize(responseBody,
                FundamentalResponse.class);

        return result;
    }

}