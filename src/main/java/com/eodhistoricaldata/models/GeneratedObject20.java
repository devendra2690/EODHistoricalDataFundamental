/*
 * EODHistoricalDataFundamentalLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.eodhistoricaldata.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for GeneratedObject20 type.
 */
public class GeneratedObject20 {
    private String date;
    private String filingDate;
    private String currencySymbol;
    private String researchDevelopment;
    private String effectOfAccountingCharges;
    private String incomeBeforeTax;
    private String minorityInterest;
    private String netIncome;
    private String sellingGeneralAdministrative;
    private String sellingAndMarketingExpenses;
    private String grossProfit;
    private String reconciledDepreciation;
    private String ebit;
    private String ebitda;
    private String depreciationAndAmortization;
    private String nonOperatingIncomeNetOther;
    private String operatingIncome;
    private String otherOperatingExpenses;
    private String interestExpense;
    private String taxProvision;
    private String interestIncome;
    private String netInterestIncome;
    private String extraordinaryItems;
    private String nonRecurring;
    private String otherItems;
    private String incomeTaxExpense;
    private String totalRevenue;
    private String totalOperatingExpenses;
    private String costOfRevenue;
    private String totalOtherIncomeExpenseNet;
    private String discontinuedOperations;
    private String netIncomeFromContinuingOps;
    private String netIncomeApplicableToCommonShares;
    private String preferredStockAndOtherAdjustments;

    /**
     * Default constructor.
     */
    public GeneratedObject20() {
    }

    /**
     * Initialization constructor.
     * @param  date  String value for date.
     * @param  filingDate  String value for filingDate.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  researchDevelopment  String value for researchDevelopment.
     * @param  effectOfAccountingCharges  String value for effectOfAccountingCharges.
     * @param  incomeBeforeTax  String value for incomeBeforeTax.
     * @param  minorityInterest  String value for minorityInterest.
     * @param  netIncome  String value for netIncome.
     * @param  sellingGeneralAdministrative  String value for sellingGeneralAdministrative.
     * @param  sellingAndMarketingExpenses  String value for sellingAndMarketingExpenses.
     * @param  grossProfit  String value for grossProfit.
     * @param  reconciledDepreciation  String value for reconciledDepreciation.
     * @param  ebit  String value for ebit.
     * @param  ebitda  String value for ebitda.
     * @param  depreciationAndAmortization  String value for depreciationAndAmortization.
     * @param  nonOperatingIncomeNetOther  String value for nonOperatingIncomeNetOther.
     * @param  operatingIncome  String value for operatingIncome.
     * @param  otherOperatingExpenses  String value for otherOperatingExpenses.
     * @param  interestExpense  String value for interestExpense.
     * @param  taxProvision  String value for taxProvision.
     * @param  interestIncome  String value for interestIncome.
     * @param  netInterestIncome  String value for netInterestIncome.
     * @param  extraordinaryItems  String value for extraordinaryItems.
     * @param  nonRecurring  String value for nonRecurring.
     * @param  otherItems  String value for otherItems.
     * @param  incomeTaxExpense  String value for incomeTaxExpense.
     * @param  totalRevenue  String value for totalRevenue.
     * @param  totalOperatingExpenses  String value for totalOperatingExpenses.
     * @param  costOfRevenue  String value for costOfRevenue.
     * @param  totalOtherIncomeExpenseNet  String value for totalOtherIncomeExpenseNet.
     * @param  discontinuedOperations  String value for discontinuedOperations.
     * @param  netIncomeFromContinuingOps  String value for netIncomeFromContinuingOps.
     * @param  netIncomeApplicableToCommonShares  String value for
     *         netIncomeApplicableToCommonShares.
     * @param  preferredStockAndOtherAdjustments  String value for
     *         preferredStockAndOtherAdjustments.
     */
    public GeneratedObject20(
            String date,
            String filingDate,
            String currencySymbol,
            String researchDevelopment,
            String effectOfAccountingCharges,
            String incomeBeforeTax,
            String minorityInterest,
            String netIncome,
            String sellingGeneralAdministrative,
            String sellingAndMarketingExpenses,
            String grossProfit,
            String reconciledDepreciation,
            String ebit,
            String ebitda,
            String depreciationAndAmortization,
            String nonOperatingIncomeNetOther,
            String operatingIncome,
            String otherOperatingExpenses,
            String interestExpense,
            String taxProvision,
            String interestIncome,
            String netInterestIncome,
            String extraordinaryItems,
            String nonRecurring,
            String otherItems,
            String incomeTaxExpense,
            String totalRevenue,
            String totalOperatingExpenses,
            String costOfRevenue,
            String totalOtherIncomeExpenseNet,
            String discontinuedOperations,
            String netIncomeFromContinuingOps,
            String netIncomeApplicableToCommonShares,
            String preferredStockAndOtherAdjustments) {
        this.date = date;
        this.filingDate = filingDate;
        this.currencySymbol = currencySymbol;
        this.researchDevelopment = researchDevelopment;
        this.effectOfAccountingCharges = effectOfAccountingCharges;
        this.incomeBeforeTax = incomeBeforeTax;
        this.minorityInterest = minorityInterest;
        this.netIncome = netIncome;
        this.sellingGeneralAdministrative = sellingGeneralAdministrative;
        this.sellingAndMarketingExpenses = sellingAndMarketingExpenses;
        this.grossProfit = grossProfit;
        this.reconciledDepreciation = reconciledDepreciation;
        this.ebit = ebit;
        this.ebitda = ebitda;
        this.depreciationAndAmortization = depreciationAndAmortization;
        this.nonOperatingIncomeNetOther = nonOperatingIncomeNetOther;
        this.operatingIncome = operatingIncome;
        this.otherOperatingExpenses = otherOperatingExpenses;
        this.interestExpense = interestExpense;
        this.taxProvision = taxProvision;
        this.interestIncome = interestIncome;
        this.netInterestIncome = netInterestIncome;
        this.extraordinaryItems = extraordinaryItems;
        this.nonRecurring = nonRecurring;
        this.otherItems = otherItems;
        this.incomeTaxExpense = incomeTaxExpense;
        this.totalRevenue = totalRevenue;
        this.totalOperatingExpenses = totalOperatingExpenses;
        this.costOfRevenue = costOfRevenue;
        this.totalOtherIncomeExpenseNet = totalOtherIncomeExpenseNet;
        this.discontinuedOperations = discontinuedOperations;
        this.netIncomeFromContinuingOps = netIncomeFromContinuingOps;
        this.netIncomeApplicableToCommonShares = netIncomeApplicableToCommonShares;
        this.preferredStockAndOtherAdjustments = preferredStockAndOtherAdjustments;
    }

    /**
     * Getter for Date.
     * @return Returns the String
     */
    @JsonGetter("date")
    public String getDate() {
        return date;
    }

    /**
     * Setter for Date.
     * @param date Value for String
     */
    @JsonSetter("date")
    public void setDate(String date) {
        this.date = date;
    }

    /**
     * Getter for FilingDate.
     * @return Returns the String
     */
    @JsonGetter("filing_date")
    public String getFilingDate() {
        return filingDate;
    }

    /**
     * Setter for FilingDate.
     * @param filingDate Value for String
     */
    @JsonSetter("filing_date")
    public void setFilingDate(String filingDate) {
        this.filingDate = filingDate;
    }

    /**
     * Getter for CurrencySymbol.
     * @return Returns the String
     */
    @JsonGetter("currency_symbol")
    public String getCurrencySymbol() {
        return currencySymbol;
    }

    /**
     * Setter for CurrencySymbol.
     * @param currencySymbol Value for String
     */
    @JsonSetter("currency_symbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = currencySymbol;
    }

    /**
     * Getter for ResearchDevelopment.
     * @return Returns the String
     */
    @JsonGetter("researchDevelopment")
    public String getResearchDevelopment() {
        return researchDevelopment;
    }

    /**
     * Setter for ResearchDevelopment.
     * @param researchDevelopment Value for String
     */
    @JsonSetter("researchDevelopment")
    public void setResearchDevelopment(String researchDevelopment) {
        this.researchDevelopment = researchDevelopment;
    }

    /**
     * Getter for EffectOfAccountingCharges.
     * @return Returns the String
     */
    @JsonGetter("effectOfAccountingCharges")
    public String getEffectOfAccountingCharges() {
        return effectOfAccountingCharges;
    }

    /**
     * Setter for EffectOfAccountingCharges.
     * @param effectOfAccountingCharges Value for String
     */
    @JsonSetter("effectOfAccountingCharges")
    public void setEffectOfAccountingCharges(String effectOfAccountingCharges) {
        this.effectOfAccountingCharges = effectOfAccountingCharges;
    }

    /**
     * Getter for IncomeBeforeTax.
     * @return Returns the String
     */
    @JsonGetter("incomeBeforeTax")
    public String getIncomeBeforeTax() {
        return incomeBeforeTax;
    }

    /**
     * Setter for IncomeBeforeTax.
     * @param incomeBeforeTax Value for String
     */
    @JsonSetter("incomeBeforeTax")
    public void setIncomeBeforeTax(String incomeBeforeTax) {
        this.incomeBeforeTax = incomeBeforeTax;
    }

    /**
     * Getter for MinorityInterest.
     * @return Returns the String
     */
    @JsonGetter("minorityInterest")
    public String getMinorityInterest() {
        return minorityInterest;
    }

    /**
     * Setter for MinorityInterest.
     * @param minorityInterest Value for String
     */
    @JsonSetter("minorityInterest")
    public void setMinorityInterest(String minorityInterest) {
        this.minorityInterest = minorityInterest;
    }

    /**
     * Getter for NetIncome.
     * @return Returns the String
     */
    @JsonGetter("netIncome")
    public String getNetIncome() {
        return netIncome;
    }

    /**
     * Setter for NetIncome.
     * @param netIncome Value for String
     */
    @JsonSetter("netIncome")
    public void setNetIncome(String netIncome) {
        this.netIncome = netIncome;
    }

    /**
     * Getter for SellingGeneralAdministrative.
     * @return Returns the String
     */
    @JsonGetter("sellingGeneralAdministrative")
    public String getSellingGeneralAdministrative() {
        return sellingGeneralAdministrative;
    }

    /**
     * Setter for SellingGeneralAdministrative.
     * @param sellingGeneralAdministrative Value for String
     */
    @JsonSetter("sellingGeneralAdministrative")
    public void setSellingGeneralAdministrative(String sellingGeneralAdministrative) {
        this.sellingGeneralAdministrative = sellingGeneralAdministrative;
    }

    /**
     * Getter for SellingAndMarketingExpenses.
     * @return Returns the String
     */
    @JsonGetter("sellingAndMarketingExpenses")
    public String getSellingAndMarketingExpenses() {
        return sellingAndMarketingExpenses;
    }

    /**
     * Setter for SellingAndMarketingExpenses.
     * @param sellingAndMarketingExpenses Value for String
     */
    @JsonSetter("sellingAndMarketingExpenses")
    public void setSellingAndMarketingExpenses(String sellingAndMarketingExpenses) {
        this.sellingAndMarketingExpenses = sellingAndMarketingExpenses;
    }

    /**
     * Getter for GrossProfit.
     * @return Returns the String
     */
    @JsonGetter("grossProfit")
    public String getGrossProfit() {
        return grossProfit;
    }

    /**
     * Setter for GrossProfit.
     * @param grossProfit Value for String
     */
    @JsonSetter("grossProfit")
    public void setGrossProfit(String grossProfit) {
        this.grossProfit = grossProfit;
    }

    /**
     * Getter for ReconciledDepreciation.
     * @return Returns the String
     */
    @JsonGetter("reconciledDepreciation")
    public String getReconciledDepreciation() {
        return reconciledDepreciation;
    }

    /**
     * Setter for ReconciledDepreciation.
     * @param reconciledDepreciation Value for String
     */
    @JsonSetter("reconciledDepreciation")
    public void setReconciledDepreciation(String reconciledDepreciation) {
        this.reconciledDepreciation = reconciledDepreciation;
    }

    /**
     * Getter for Ebit.
     * @return Returns the String
     */
    @JsonGetter("ebit")
    public String getEbit() {
        return ebit;
    }

    /**
     * Setter for Ebit.
     * @param ebit Value for String
     */
    @JsonSetter("ebit")
    public void setEbit(String ebit) {
        this.ebit = ebit;
    }

    /**
     * Getter for Ebitda.
     * @return Returns the String
     */
    @JsonGetter("ebitda")
    public String getEbitda() {
        return ebitda;
    }

    /**
     * Setter for Ebitda.
     * @param ebitda Value for String
     */
    @JsonSetter("ebitda")
    public void setEbitda(String ebitda) {
        this.ebitda = ebitda;
    }

    /**
     * Getter for DepreciationAndAmortization.
     * @return Returns the String
     */
    @JsonGetter("depreciationAndAmortization")
    public String getDepreciationAndAmortization() {
        return depreciationAndAmortization;
    }

    /**
     * Setter for DepreciationAndAmortization.
     * @param depreciationAndAmortization Value for String
     */
    @JsonSetter("depreciationAndAmortization")
    public void setDepreciationAndAmortization(String depreciationAndAmortization) {
        this.depreciationAndAmortization = depreciationAndAmortization;
    }

    /**
     * Getter for NonOperatingIncomeNetOther.
     * @return Returns the String
     */
    @JsonGetter("nonOperatingIncomeNetOther")
    public String getNonOperatingIncomeNetOther() {
        return nonOperatingIncomeNetOther;
    }

    /**
     * Setter for NonOperatingIncomeNetOther.
     * @param nonOperatingIncomeNetOther Value for String
     */
    @JsonSetter("nonOperatingIncomeNetOther")
    public void setNonOperatingIncomeNetOther(String nonOperatingIncomeNetOther) {
        this.nonOperatingIncomeNetOther = nonOperatingIncomeNetOther;
    }

    /**
     * Getter for OperatingIncome.
     * @return Returns the String
     */
    @JsonGetter("operatingIncome")
    public String getOperatingIncome() {
        return operatingIncome;
    }

    /**
     * Setter for OperatingIncome.
     * @param operatingIncome Value for String
     */
    @JsonSetter("operatingIncome")
    public void setOperatingIncome(String operatingIncome) {
        this.operatingIncome = operatingIncome;
    }

    /**
     * Getter for OtherOperatingExpenses.
     * @return Returns the String
     */
    @JsonGetter("otherOperatingExpenses")
    public String getOtherOperatingExpenses() {
        return otherOperatingExpenses;
    }

    /**
     * Setter for OtherOperatingExpenses.
     * @param otherOperatingExpenses Value for String
     */
    @JsonSetter("otherOperatingExpenses")
    public void setOtherOperatingExpenses(String otherOperatingExpenses) {
        this.otherOperatingExpenses = otherOperatingExpenses;
    }

    /**
     * Getter for InterestExpense.
     * @return Returns the String
     */
    @JsonGetter("interestExpense")
    public String getInterestExpense() {
        return interestExpense;
    }

    /**
     * Setter for InterestExpense.
     * @param interestExpense Value for String
     */
    @JsonSetter("interestExpense")
    public void setInterestExpense(String interestExpense) {
        this.interestExpense = interestExpense;
    }

    /**
     * Getter for TaxProvision.
     * @return Returns the String
     */
    @JsonGetter("taxProvision")
    public String getTaxProvision() {
        return taxProvision;
    }

    /**
     * Setter for TaxProvision.
     * @param taxProvision Value for String
     */
    @JsonSetter("taxProvision")
    public void setTaxProvision(String taxProvision) {
        this.taxProvision = taxProvision;
    }

    /**
     * Getter for InterestIncome.
     * @return Returns the String
     */
    @JsonGetter("interestIncome")
    public String getInterestIncome() {
        return interestIncome;
    }

    /**
     * Setter for InterestIncome.
     * @param interestIncome Value for String
     */
    @JsonSetter("interestIncome")
    public void setInterestIncome(String interestIncome) {
        this.interestIncome = interestIncome;
    }

    /**
     * Getter for NetInterestIncome.
     * @return Returns the String
     */
    @JsonGetter("netInterestIncome")
    public String getNetInterestIncome() {
        return netInterestIncome;
    }

    /**
     * Setter for NetInterestIncome.
     * @param netInterestIncome Value for String
     */
    @JsonSetter("netInterestIncome")
    public void setNetInterestIncome(String netInterestIncome) {
        this.netInterestIncome = netInterestIncome;
    }

    /**
     * Getter for ExtraordinaryItems.
     * @return Returns the String
     */
    @JsonGetter("extraordinaryItems")
    public String getExtraordinaryItems() {
        return extraordinaryItems;
    }

    /**
     * Setter for ExtraordinaryItems.
     * @param extraordinaryItems Value for String
     */
    @JsonSetter("extraordinaryItems")
    public void setExtraordinaryItems(String extraordinaryItems) {
        this.extraordinaryItems = extraordinaryItems;
    }

    /**
     * Getter for NonRecurring.
     * @return Returns the String
     */
    @JsonGetter("nonRecurring")
    public String getNonRecurring() {
        return nonRecurring;
    }

    /**
     * Setter for NonRecurring.
     * @param nonRecurring Value for String
     */
    @JsonSetter("nonRecurring")
    public void setNonRecurring(String nonRecurring) {
        this.nonRecurring = nonRecurring;
    }

    /**
     * Getter for OtherItems.
     * @return Returns the String
     */
    @JsonGetter("otherItems")
    public String getOtherItems() {
        return otherItems;
    }

    /**
     * Setter for OtherItems.
     * @param otherItems Value for String
     */
    @JsonSetter("otherItems")
    public void setOtherItems(String otherItems) {
        this.otherItems = otherItems;
    }

    /**
     * Getter for IncomeTaxExpense.
     * @return Returns the String
     */
    @JsonGetter("incomeTaxExpense")
    public String getIncomeTaxExpense() {
        return incomeTaxExpense;
    }

    /**
     * Setter for IncomeTaxExpense.
     * @param incomeTaxExpense Value for String
     */
    @JsonSetter("incomeTaxExpense")
    public void setIncomeTaxExpense(String incomeTaxExpense) {
        this.incomeTaxExpense = incomeTaxExpense;
    }

    /**
     * Getter for TotalRevenue.
     * @return Returns the String
     */
    @JsonGetter("totalRevenue")
    public String getTotalRevenue() {
        return totalRevenue;
    }

    /**
     * Setter for TotalRevenue.
     * @param totalRevenue Value for String
     */
    @JsonSetter("totalRevenue")
    public void setTotalRevenue(String totalRevenue) {
        this.totalRevenue = totalRevenue;
    }

    /**
     * Getter for TotalOperatingExpenses.
     * @return Returns the String
     */
    @JsonGetter("totalOperatingExpenses")
    public String getTotalOperatingExpenses() {
        return totalOperatingExpenses;
    }

    /**
     * Setter for TotalOperatingExpenses.
     * @param totalOperatingExpenses Value for String
     */
    @JsonSetter("totalOperatingExpenses")
    public void setTotalOperatingExpenses(String totalOperatingExpenses) {
        this.totalOperatingExpenses = totalOperatingExpenses;
    }

    /**
     * Getter for CostOfRevenue.
     * @return Returns the String
     */
    @JsonGetter("costOfRevenue")
    public String getCostOfRevenue() {
        return costOfRevenue;
    }

    /**
     * Setter for CostOfRevenue.
     * @param costOfRevenue Value for String
     */
    @JsonSetter("costOfRevenue")
    public void setCostOfRevenue(String costOfRevenue) {
        this.costOfRevenue = costOfRevenue;
    }

    /**
     * Getter for TotalOtherIncomeExpenseNet.
     * @return Returns the String
     */
    @JsonGetter("totalOtherIncomeExpenseNet")
    public String getTotalOtherIncomeExpenseNet() {
        return totalOtherIncomeExpenseNet;
    }

    /**
     * Setter for TotalOtherIncomeExpenseNet.
     * @param totalOtherIncomeExpenseNet Value for String
     */
    @JsonSetter("totalOtherIncomeExpenseNet")
    public void setTotalOtherIncomeExpenseNet(String totalOtherIncomeExpenseNet) {
        this.totalOtherIncomeExpenseNet = totalOtherIncomeExpenseNet;
    }

    /**
     * Getter for DiscontinuedOperations.
     * @return Returns the String
     */
    @JsonGetter("discontinuedOperations")
    public String getDiscontinuedOperations() {
        return discontinuedOperations;
    }

    /**
     * Setter for DiscontinuedOperations.
     * @param discontinuedOperations Value for String
     */
    @JsonSetter("discontinuedOperations")
    public void setDiscontinuedOperations(String discontinuedOperations) {
        this.discontinuedOperations = discontinuedOperations;
    }

    /**
     * Getter for NetIncomeFromContinuingOps.
     * @return Returns the String
     */
    @JsonGetter("netIncomeFromContinuingOps")
    public String getNetIncomeFromContinuingOps() {
        return netIncomeFromContinuingOps;
    }

    /**
     * Setter for NetIncomeFromContinuingOps.
     * @param netIncomeFromContinuingOps Value for String
     */
    @JsonSetter("netIncomeFromContinuingOps")
    public void setNetIncomeFromContinuingOps(String netIncomeFromContinuingOps) {
        this.netIncomeFromContinuingOps = netIncomeFromContinuingOps;
    }

    /**
     * Getter for NetIncomeApplicableToCommonShares.
     * @return Returns the String
     */
    @JsonGetter("netIncomeApplicableToCommonShares")
    public String getNetIncomeApplicableToCommonShares() {
        return netIncomeApplicableToCommonShares;
    }

    /**
     * Setter for NetIncomeApplicableToCommonShares.
     * @param netIncomeApplicableToCommonShares Value for String
     */
    @JsonSetter("netIncomeApplicableToCommonShares")
    public void setNetIncomeApplicableToCommonShares(String netIncomeApplicableToCommonShares) {
        this.netIncomeApplicableToCommonShares = netIncomeApplicableToCommonShares;
    }

    /**
     * Getter for PreferredStockAndOtherAdjustments.
     * @return Returns the String
     */
    @JsonGetter("preferredStockAndOtherAdjustments")
    public String getPreferredStockAndOtherAdjustments() {
        return preferredStockAndOtherAdjustments;
    }

    /**
     * Setter for PreferredStockAndOtherAdjustments.
     * @param preferredStockAndOtherAdjustments Value for String
     */
    @JsonSetter("preferredStockAndOtherAdjustments")
    public void setPreferredStockAndOtherAdjustments(String preferredStockAndOtherAdjustments) {
        this.preferredStockAndOtherAdjustments = preferredStockAndOtherAdjustments;
    }

    /**
     * Converts this GeneratedObject20 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GeneratedObject20 [" + "date=" + date + ", filingDate=" + filingDate
                + ", currencySymbol=" + currencySymbol + ", researchDevelopment="
                + researchDevelopment + ", effectOfAccountingCharges=" + effectOfAccountingCharges
                + ", incomeBeforeTax=" + incomeBeforeTax + ", minorityInterest=" + minorityInterest
                + ", netIncome=" + netIncome + ", sellingGeneralAdministrative="
                + sellingGeneralAdministrative + ", sellingAndMarketingExpenses="
                + sellingAndMarketingExpenses + ", grossProfit=" + grossProfit
                + ", reconciledDepreciation=" + reconciledDepreciation + ", ebit=" + ebit
                + ", ebitda=" + ebitda + ", depreciationAndAmortization="
                + depreciationAndAmortization + ", nonOperatingIncomeNetOther="
                + nonOperatingIncomeNetOther + ", operatingIncome=" + operatingIncome
                + ", otherOperatingExpenses=" + otherOperatingExpenses + ", interestExpense="
                + interestExpense + ", taxProvision=" + taxProvision + ", interestIncome="
                + interestIncome + ", netInterestIncome=" + netInterestIncome
                + ", extraordinaryItems=" + extraordinaryItems + ", nonRecurring=" + nonRecurring
                + ", otherItems=" + otherItems + ", incomeTaxExpense=" + incomeTaxExpense
                + ", totalRevenue=" + totalRevenue + ", totalOperatingExpenses="
                + totalOperatingExpenses + ", costOfRevenue=" + costOfRevenue
                + ", totalOtherIncomeExpenseNet=" + totalOtherIncomeExpenseNet
                + ", discontinuedOperations=" + discontinuedOperations
                + ", netIncomeFromContinuingOps=" + netIncomeFromContinuingOps
                + ", netIncomeApplicableToCommonShares=" + netIncomeApplicableToCommonShares
                + ", preferredStockAndOtherAdjustments=" + preferredStockAndOtherAdjustments + "]";
    }

    /**
     * Builds a new {@link GeneratedObject20.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GeneratedObject20.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(date, filingDate, currencySymbol, researchDevelopment,
                effectOfAccountingCharges, incomeBeforeTax, minorityInterest, netIncome,
                sellingGeneralAdministrative, sellingAndMarketingExpenses, grossProfit,
                reconciledDepreciation, ebit, ebitda, depreciationAndAmortization,
                nonOperatingIncomeNetOther, operatingIncome, otherOperatingExpenses,
                interestExpense, taxProvision, interestIncome, netInterestIncome,
                extraordinaryItems, nonRecurring, otherItems, incomeTaxExpense, totalRevenue,
                totalOperatingExpenses, costOfRevenue, totalOtherIncomeExpenseNet,
                discontinuedOperations, netIncomeFromContinuingOps,
                netIncomeApplicableToCommonShares, preferredStockAndOtherAdjustments);
        return builder;
    }

    /**
     * Class to build instances of {@link GeneratedObject20}.
     */
    public static class Builder {
        private String date;
        private String filingDate;
        private String currencySymbol;
        private String researchDevelopment;
        private String effectOfAccountingCharges;
        private String incomeBeforeTax;
        private String minorityInterest;
        private String netIncome;
        private String sellingGeneralAdministrative;
        private String sellingAndMarketingExpenses;
        private String grossProfit;
        private String reconciledDepreciation;
        private String ebit;
        private String ebitda;
        private String depreciationAndAmortization;
        private String nonOperatingIncomeNetOther;
        private String operatingIncome;
        private String otherOperatingExpenses;
        private String interestExpense;
        private String taxProvision;
        private String interestIncome;
        private String netInterestIncome;
        private String extraordinaryItems;
        private String nonRecurring;
        private String otherItems;
        private String incomeTaxExpense;
        private String totalRevenue;
        private String totalOperatingExpenses;
        private String costOfRevenue;
        private String totalOtherIncomeExpenseNet;
        private String discontinuedOperations;
        private String netIncomeFromContinuingOps;
        private String netIncomeApplicableToCommonShares;
        private String preferredStockAndOtherAdjustments;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  date  String value for date.
         * @param  filingDate  String value for filingDate.
         * @param  currencySymbol  String value for currencySymbol.
         * @param  researchDevelopment  String value for researchDevelopment.
         * @param  effectOfAccountingCharges  String value for effectOfAccountingCharges.
         * @param  incomeBeforeTax  String value for incomeBeforeTax.
         * @param  minorityInterest  String value for minorityInterest.
         * @param  netIncome  String value for netIncome.
         * @param  sellingGeneralAdministrative  String value for sellingGeneralAdministrative.
         * @param  sellingAndMarketingExpenses  String value for sellingAndMarketingExpenses.
         * @param  grossProfit  String value for grossProfit.
         * @param  reconciledDepreciation  String value for reconciledDepreciation.
         * @param  ebit  String value for ebit.
         * @param  ebitda  String value for ebitda.
         * @param  depreciationAndAmortization  String value for depreciationAndAmortization.
         * @param  nonOperatingIncomeNetOther  String value for nonOperatingIncomeNetOther.
         * @param  operatingIncome  String value for operatingIncome.
         * @param  otherOperatingExpenses  String value for otherOperatingExpenses.
         * @param  interestExpense  String value for interestExpense.
         * @param  taxProvision  String value for taxProvision.
         * @param  interestIncome  String value for interestIncome.
         * @param  netInterestIncome  String value for netInterestIncome.
         * @param  extraordinaryItems  String value for extraordinaryItems.
         * @param  nonRecurring  String value for nonRecurring.
         * @param  otherItems  String value for otherItems.
         * @param  incomeTaxExpense  String value for incomeTaxExpense.
         * @param  totalRevenue  String value for totalRevenue.
         * @param  totalOperatingExpenses  String value for totalOperatingExpenses.
         * @param  costOfRevenue  String value for costOfRevenue.
         * @param  totalOtherIncomeExpenseNet  String value for totalOtherIncomeExpenseNet.
         * @param  discontinuedOperations  String value for discontinuedOperations.
         * @param  netIncomeFromContinuingOps  String value for netIncomeFromContinuingOps.
         * @param  netIncomeApplicableToCommonShares  String value for
         *         netIncomeApplicableToCommonShares.
         * @param  preferredStockAndOtherAdjustments  String value for
         *         preferredStockAndOtherAdjustments.
         */
        public Builder(String date, String filingDate, String currencySymbol,
                String researchDevelopment, String effectOfAccountingCharges,
                String incomeBeforeTax, String minorityInterest, String netIncome,
                String sellingGeneralAdministrative, String sellingAndMarketingExpenses,
                String grossProfit, String reconciledDepreciation, String ebit, String ebitda,
                String depreciationAndAmortization, String nonOperatingIncomeNetOther,
                String operatingIncome, String otherOperatingExpenses, String interestExpense,
                String taxProvision, String interestIncome, String netInterestIncome,
                String extraordinaryItems, String nonRecurring, String otherItems,
                String incomeTaxExpense, String totalRevenue, String totalOperatingExpenses,
                String costOfRevenue, String totalOtherIncomeExpenseNet,
                String discontinuedOperations, String netIncomeFromContinuingOps,
                String netIncomeApplicableToCommonShares,
                String preferredStockAndOtherAdjustments) {
            this.date = date;
            this.filingDate = filingDate;
            this.currencySymbol = currencySymbol;
            this.researchDevelopment = researchDevelopment;
            this.effectOfAccountingCharges = effectOfAccountingCharges;
            this.incomeBeforeTax = incomeBeforeTax;
            this.minorityInterest = minorityInterest;
            this.netIncome = netIncome;
            this.sellingGeneralAdministrative = sellingGeneralAdministrative;
            this.sellingAndMarketingExpenses = sellingAndMarketingExpenses;
            this.grossProfit = grossProfit;
            this.reconciledDepreciation = reconciledDepreciation;
            this.ebit = ebit;
            this.ebitda = ebitda;
            this.depreciationAndAmortization = depreciationAndAmortization;
            this.nonOperatingIncomeNetOther = nonOperatingIncomeNetOther;
            this.operatingIncome = operatingIncome;
            this.otherOperatingExpenses = otherOperatingExpenses;
            this.interestExpense = interestExpense;
            this.taxProvision = taxProvision;
            this.interestIncome = interestIncome;
            this.netInterestIncome = netInterestIncome;
            this.extraordinaryItems = extraordinaryItems;
            this.nonRecurring = nonRecurring;
            this.otherItems = otherItems;
            this.incomeTaxExpense = incomeTaxExpense;
            this.totalRevenue = totalRevenue;
            this.totalOperatingExpenses = totalOperatingExpenses;
            this.costOfRevenue = costOfRevenue;
            this.totalOtherIncomeExpenseNet = totalOtherIncomeExpenseNet;
            this.discontinuedOperations = discontinuedOperations;
            this.netIncomeFromContinuingOps = netIncomeFromContinuingOps;
            this.netIncomeApplicableToCommonShares = netIncomeApplicableToCommonShares;
            this.preferredStockAndOtherAdjustments = preferredStockAndOtherAdjustments;
        }

        /**
         * Setter for date.
         * @param  date  String value for date.
         * @return Builder
         */
        public Builder date(String date) {
            this.date = date;
            return this;
        }

        /**
         * Setter for filingDate.
         * @param  filingDate  String value for filingDate.
         * @return Builder
         */
        public Builder filingDate(String filingDate) {
            this.filingDate = filingDate;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = currencySymbol;
            return this;
        }

        /**
         * Setter for researchDevelopment.
         * @param  researchDevelopment  String value for researchDevelopment.
         * @return Builder
         */
        public Builder researchDevelopment(String researchDevelopment) {
            this.researchDevelopment = researchDevelopment;
            return this;
        }

        /**
         * Setter for effectOfAccountingCharges.
         * @param  effectOfAccountingCharges  String value for effectOfAccountingCharges.
         * @return Builder
         */
        public Builder effectOfAccountingCharges(String effectOfAccountingCharges) {
            this.effectOfAccountingCharges = effectOfAccountingCharges;
            return this;
        }

        /**
         * Setter for incomeBeforeTax.
         * @param  incomeBeforeTax  String value for incomeBeforeTax.
         * @return Builder
         */
        public Builder incomeBeforeTax(String incomeBeforeTax) {
            this.incomeBeforeTax = incomeBeforeTax;
            return this;
        }

        /**
         * Setter for minorityInterest.
         * @param  minorityInterest  String value for minorityInterest.
         * @return Builder
         */
        public Builder minorityInterest(String minorityInterest) {
            this.minorityInterest = minorityInterest;
            return this;
        }

        /**
         * Setter for netIncome.
         * @param  netIncome  String value for netIncome.
         * @return Builder
         */
        public Builder netIncome(String netIncome) {
            this.netIncome = netIncome;
            return this;
        }

        /**
         * Setter for sellingGeneralAdministrative.
         * @param  sellingGeneralAdministrative  String value for sellingGeneralAdministrative.
         * @return Builder
         */
        public Builder sellingGeneralAdministrative(String sellingGeneralAdministrative) {
            this.sellingGeneralAdministrative = sellingGeneralAdministrative;
            return this;
        }

        /**
         * Setter for sellingAndMarketingExpenses.
         * @param  sellingAndMarketingExpenses  String value for sellingAndMarketingExpenses.
         * @return Builder
         */
        public Builder sellingAndMarketingExpenses(String sellingAndMarketingExpenses) {
            this.sellingAndMarketingExpenses = sellingAndMarketingExpenses;
            return this;
        }

        /**
         * Setter for grossProfit.
         * @param  grossProfit  String value for grossProfit.
         * @return Builder
         */
        public Builder grossProfit(String grossProfit) {
            this.grossProfit = grossProfit;
            return this;
        }

        /**
         * Setter for reconciledDepreciation.
         * @param  reconciledDepreciation  String value for reconciledDepreciation.
         * @return Builder
         */
        public Builder reconciledDepreciation(String reconciledDepreciation) {
            this.reconciledDepreciation = reconciledDepreciation;
            return this;
        }

        /**
         * Setter for ebit.
         * @param  ebit  String value for ebit.
         * @return Builder
         */
        public Builder ebit(String ebit) {
            this.ebit = ebit;
            return this;
        }

        /**
         * Setter for ebitda.
         * @param  ebitda  String value for ebitda.
         * @return Builder
         */
        public Builder ebitda(String ebitda) {
            this.ebitda = ebitda;
            return this;
        }

        /**
         * Setter for depreciationAndAmortization.
         * @param  depreciationAndAmortization  String value for depreciationAndAmortization.
         * @return Builder
         */
        public Builder depreciationAndAmortization(String depreciationAndAmortization) {
            this.depreciationAndAmortization = depreciationAndAmortization;
            return this;
        }

        /**
         * Setter for nonOperatingIncomeNetOther.
         * @param  nonOperatingIncomeNetOther  String value for nonOperatingIncomeNetOther.
         * @return Builder
         */
        public Builder nonOperatingIncomeNetOther(String nonOperatingIncomeNetOther) {
            this.nonOperatingIncomeNetOther = nonOperatingIncomeNetOther;
            return this;
        }

        /**
         * Setter for operatingIncome.
         * @param  operatingIncome  String value for operatingIncome.
         * @return Builder
         */
        public Builder operatingIncome(String operatingIncome) {
            this.operatingIncome = operatingIncome;
            return this;
        }

        /**
         * Setter for otherOperatingExpenses.
         * @param  otherOperatingExpenses  String value for otherOperatingExpenses.
         * @return Builder
         */
        public Builder otherOperatingExpenses(String otherOperatingExpenses) {
            this.otherOperatingExpenses = otherOperatingExpenses;
            return this;
        }

        /**
         * Setter for interestExpense.
         * @param  interestExpense  String value for interestExpense.
         * @return Builder
         */
        public Builder interestExpense(String interestExpense) {
            this.interestExpense = interestExpense;
            return this;
        }

        /**
         * Setter for taxProvision.
         * @param  taxProvision  String value for taxProvision.
         * @return Builder
         */
        public Builder taxProvision(String taxProvision) {
            this.taxProvision = taxProvision;
            return this;
        }

        /**
         * Setter for interestIncome.
         * @param  interestIncome  String value for interestIncome.
         * @return Builder
         */
        public Builder interestIncome(String interestIncome) {
            this.interestIncome = interestIncome;
            return this;
        }

        /**
         * Setter for netInterestIncome.
         * @param  netInterestIncome  String value for netInterestIncome.
         * @return Builder
         */
        public Builder netInterestIncome(String netInterestIncome) {
            this.netInterestIncome = netInterestIncome;
            return this;
        }

        /**
         * Setter for extraordinaryItems.
         * @param  extraordinaryItems  String value for extraordinaryItems.
         * @return Builder
         */
        public Builder extraordinaryItems(String extraordinaryItems) {
            this.extraordinaryItems = extraordinaryItems;
            return this;
        }

        /**
         * Setter for nonRecurring.
         * @param  nonRecurring  String value for nonRecurring.
         * @return Builder
         */
        public Builder nonRecurring(String nonRecurring) {
            this.nonRecurring = nonRecurring;
            return this;
        }

        /**
         * Setter for otherItems.
         * @param  otherItems  String value for otherItems.
         * @return Builder
         */
        public Builder otherItems(String otherItems) {
            this.otherItems = otherItems;
            return this;
        }

        /**
         * Setter for incomeTaxExpense.
         * @param  incomeTaxExpense  String value for incomeTaxExpense.
         * @return Builder
         */
        public Builder incomeTaxExpense(String incomeTaxExpense) {
            this.incomeTaxExpense = incomeTaxExpense;
            return this;
        }

        /**
         * Setter for totalRevenue.
         * @param  totalRevenue  String value for totalRevenue.
         * @return Builder
         */
        public Builder totalRevenue(String totalRevenue) {
            this.totalRevenue = totalRevenue;
            return this;
        }

        /**
         * Setter for totalOperatingExpenses.
         * @param  totalOperatingExpenses  String value for totalOperatingExpenses.
         * @return Builder
         */
        public Builder totalOperatingExpenses(String totalOperatingExpenses) {
            this.totalOperatingExpenses = totalOperatingExpenses;
            return this;
        }

        /**
         * Setter for costOfRevenue.
         * @param  costOfRevenue  String value for costOfRevenue.
         * @return Builder
         */
        public Builder costOfRevenue(String costOfRevenue) {
            this.costOfRevenue = costOfRevenue;
            return this;
        }

        /**
         * Setter for totalOtherIncomeExpenseNet.
         * @param  totalOtherIncomeExpenseNet  String value for totalOtherIncomeExpenseNet.
         * @return Builder
         */
        public Builder totalOtherIncomeExpenseNet(String totalOtherIncomeExpenseNet) {
            this.totalOtherIncomeExpenseNet = totalOtherIncomeExpenseNet;
            return this;
        }

        /**
         * Setter for discontinuedOperations.
         * @param  discontinuedOperations  String value for discontinuedOperations.
         * @return Builder
         */
        public Builder discontinuedOperations(String discontinuedOperations) {
            this.discontinuedOperations = discontinuedOperations;
            return this;
        }

        /**
         * Setter for netIncomeFromContinuingOps.
         * @param  netIncomeFromContinuingOps  String value for netIncomeFromContinuingOps.
         * @return Builder
         */
        public Builder netIncomeFromContinuingOps(String netIncomeFromContinuingOps) {
            this.netIncomeFromContinuingOps = netIncomeFromContinuingOps;
            return this;
        }

        /**
         * Setter for netIncomeApplicableToCommonShares.
         * @param  netIncomeApplicableToCommonShares  String value for
         *         netIncomeApplicableToCommonShares.
         * @return Builder
         */
        public Builder netIncomeApplicableToCommonShares(
                String netIncomeApplicableToCommonShares) {
            this.netIncomeApplicableToCommonShares = netIncomeApplicableToCommonShares;
            return this;
        }

        /**
         * Setter for preferredStockAndOtherAdjustments.
         * @param  preferredStockAndOtherAdjustments  String value for
         *         preferredStockAndOtherAdjustments.
         * @return Builder
         */
        public Builder preferredStockAndOtherAdjustments(
                String preferredStockAndOtherAdjustments) {
            this.preferredStockAndOtherAdjustments = preferredStockAndOtherAdjustments;
            return this;
        }

        /**
         * Builds a new {@link GeneratedObject20} object using the set fields.
         * @return {@link GeneratedObject20}
         */
        public GeneratedObject20 build() {
            return new GeneratedObject20(date, filingDate, currencySymbol, researchDevelopment,
                    effectOfAccountingCharges, incomeBeforeTax, minorityInterest, netIncome,
                    sellingGeneralAdministrative, sellingAndMarketingExpenses, grossProfit,
                    reconciledDepreciation, ebit, ebitda, depreciationAndAmortization,
                    nonOperatingIncomeNetOther, operatingIncome, otherOperatingExpenses,
                    interestExpense, taxProvision, interestIncome, netInterestIncome,
                    extraordinaryItems, nonRecurring, otherItems, incomeTaxExpense, totalRevenue,
                    totalOperatingExpenses, costOfRevenue, totalOtherIncomeExpenseNet,
                    discontinuedOperations, netIncomeFromContinuingOps,
                    netIncomeApplicableToCommonShares, preferredStockAndOtherAdjustments);
        }
    }
}
