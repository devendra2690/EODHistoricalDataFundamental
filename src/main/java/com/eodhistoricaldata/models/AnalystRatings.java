/*
 * EODHistoricalDataFundamentalLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.eodhistoricaldata.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for AnalystRatings type.
 */
public class AnalystRatings {
    private double rating;
    private double targetPrice;
    private int strongBuy;
    private int buy;
    private int hold;
    private int sell;
    private int strongSell;

    /**
     * Default constructor.
     */
    public AnalystRatings() {
    }

    /**
     * Initialization constructor.
     * @param  rating  double value for rating.
     * @param  targetPrice  double value for targetPrice.
     * @param  strongBuy  int value for strongBuy.
     * @param  buy  int value for buy.
     * @param  hold  int value for hold.
     * @param  sell  int value for sell.
     * @param  strongSell  int value for strongSell.
     */
    public AnalystRatings(
            double rating,
            double targetPrice,
            int strongBuy,
            int buy,
            int hold,
            int sell,
            int strongSell) {
        this.rating = rating;
        this.targetPrice = targetPrice;
        this.strongBuy = strongBuy;
        this.buy = buy;
        this.hold = hold;
        this.sell = sell;
        this.strongSell = strongSell;
    }

    /**
     * Getter for Rating.
     * @return Returns the double
     */
    @JsonGetter("Rating")
    public double getRating() {
        return rating;
    }

    /**
     * Setter for Rating.
     * @param rating Value for double
     */
    @JsonSetter("Rating")
    public void setRating(double rating) {
        this.rating = rating;
    }

    /**
     * Getter for TargetPrice.
     * @return Returns the double
     */
    @JsonGetter("TargetPrice")
    public double getTargetPrice() {
        return targetPrice;
    }

    /**
     * Setter for TargetPrice.
     * @param targetPrice Value for double
     */
    @JsonSetter("TargetPrice")
    public void setTargetPrice(double targetPrice) {
        this.targetPrice = targetPrice;
    }

    /**
     * Getter for StrongBuy.
     * @return Returns the int
     */
    @JsonGetter("StrongBuy")
    public int getStrongBuy() {
        return strongBuy;
    }

    /**
     * Setter for StrongBuy.
     * @param strongBuy Value for int
     */
    @JsonSetter("StrongBuy")
    public void setStrongBuy(int strongBuy) {
        this.strongBuy = strongBuy;
    }

    /**
     * Getter for Buy.
     * @return Returns the int
     */
    @JsonGetter("Buy")
    public int getBuy() {
        return buy;
    }

    /**
     * Setter for Buy.
     * @param buy Value for int
     */
    @JsonSetter("Buy")
    public void setBuy(int buy) {
        this.buy = buy;
    }

    /**
     * Getter for Hold.
     * @return Returns the int
     */
    @JsonGetter("Hold")
    public int getHold() {
        return hold;
    }

    /**
     * Setter for Hold.
     * @param hold Value for int
     */
    @JsonSetter("Hold")
    public void setHold(int hold) {
        this.hold = hold;
    }

    /**
     * Getter for Sell.
     * @return Returns the int
     */
    @JsonGetter("Sell")
    public int getSell() {
        return sell;
    }

    /**
     * Setter for Sell.
     * @param sell Value for int
     */
    @JsonSetter("Sell")
    public void setSell(int sell) {
        this.sell = sell;
    }

    /**
     * Getter for StrongSell.
     * @return Returns the int
     */
    @JsonGetter("StrongSell")
    public int getStrongSell() {
        return strongSell;
    }

    /**
     * Setter for StrongSell.
     * @param strongSell Value for int
     */
    @JsonSetter("StrongSell")
    public void setStrongSell(int strongSell) {
        this.strongSell = strongSell;
    }

    /**
     * Converts this AnalystRatings into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AnalystRatings [" + "rating=" + rating + ", targetPrice=" + targetPrice
                + ", strongBuy=" + strongBuy + ", buy=" + buy + ", hold=" + hold + ", sell=" + sell
                + ", strongSell=" + strongSell + "]";
    }

    /**
     * Builds a new {@link AnalystRatings.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AnalystRatings.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(rating, targetPrice, strongBuy, buy, hold, sell, strongSell);
        return builder;
    }

    /**
     * Class to build instances of {@link AnalystRatings}.
     */
    public static class Builder {
        private double rating;
        private double targetPrice;
        private int strongBuy;
        private int buy;
        private int hold;
        private int sell;
        private int strongSell;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  rating  double value for rating.
         * @param  targetPrice  double value for targetPrice.
         * @param  strongBuy  int value for strongBuy.
         * @param  buy  int value for buy.
         * @param  hold  int value for hold.
         * @param  sell  int value for sell.
         * @param  strongSell  int value for strongSell.
         */
        public Builder(double rating, double targetPrice, int strongBuy, int buy, int hold,
                int sell, int strongSell) {
            this.rating = rating;
            this.targetPrice = targetPrice;
            this.strongBuy = strongBuy;
            this.buy = buy;
            this.hold = hold;
            this.sell = sell;
            this.strongSell = strongSell;
        }

        /**
         * Setter for rating.
         * @param  rating  double value for rating.
         * @return Builder
         */
        public Builder rating(double rating) {
            this.rating = rating;
            return this;
        }

        /**
         * Setter for targetPrice.
         * @param  targetPrice  double value for targetPrice.
         * @return Builder
         */
        public Builder targetPrice(double targetPrice) {
            this.targetPrice = targetPrice;
            return this;
        }

        /**
         * Setter for strongBuy.
         * @param  strongBuy  int value for strongBuy.
         * @return Builder
         */
        public Builder strongBuy(int strongBuy) {
            this.strongBuy = strongBuy;
            return this;
        }

        /**
         * Setter for buy.
         * @param  buy  int value for buy.
         * @return Builder
         */
        public Builder buy(int buy) {
            this.buy = buy;
            return this;
        }

        /**
         * Setter for hold.
         * @param  hold  int value for hold.
         * @return Builder
         */
        public Builder hold(int hold) {
            this.hold = hold;
            return this;
        }

        /**
         * Setter for sell.
         * @param  sell  int value for sell.
         * @return Builder
         */
        public Builder sell(int sell) {
            this.sell = sell;
            return this;
        }

        /**
         * Setter for strongSell.
         * @param  strongSell  int value for strongSell.
         * @return Builder
         */
        public Builder strongSell(int strongSell) {
            this.strongSell = strongSell;
            return this;
        }

        /**
         * Builds a new {@link AnalystRatings} object using the set fields.
         * @return {@link AnalystRatings}
         */
        public AnalystRatings build() {
            return new AnalystRatings(rating, targetPrice, strongBuy, buy, hold, sell, strongSell);
        }
    }
}
