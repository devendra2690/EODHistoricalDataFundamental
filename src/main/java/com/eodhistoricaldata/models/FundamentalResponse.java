/*
 * EODHistoricalDataFundamentalLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.eodhistoricaldata.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.Map;

/**
 * This is a model class for FundamentalResponse type.
 */
public class FundamentalResponse {
    private General general;
    private Highlights highlights;
    private Valuation valuation;
    private SharesStats sharesStats;
    private Technicals technicals;
    private SplitsDividends splitsDividends;
    private AnalystRatings analystRatings;
    private Holders holders;
    private Map<String, GeneratedObject7> insiderTransactions;
    private ESGScores eSGScores;
    private OutstandingShares outstandingShares;
    private Earnings earnings;
    private Financials financials;

    /**
     * Default constructor.
     */
    public FundamentalResponse() {
    }

    /**
     * Initialization constructor.
     * @param  general  General value for general.
     * @param  highlights  Highlights value for highlights.
     * @param  valuation  Valuation value for valuation.
     * @param  sharesStats  SharesStats value for sharesStats.
     * @param  technicals  Technicals value for technicals.
     * @param  splitsDividends  SplitsDividends value for splitsDividends.
     * @param  analystRatings  AnalystRatings value for analystRatings.
     * @param  holders  Holders value for holders.
     * @param  insiderTransactions  Map of String, value for insiderTransactions.
     * @param  eSGScores  ESGScores value for eSGScores.
     * @param  outstandingShares  OutstandingShares value for outstandingShares.
     * @param  earnings  Earnings value for earnings.
     * @param  financials  Financials value for financials.
     */
    public FundamentalResponse(
            General general,
            Highlights highlights,
            Valuation valuation,
            SharesStats sharesStats,
            Technicals technicals,
            SplitsDividends splitsDividends,
            AnalystRatings analystRatings,
            Holders holders,
            Map<String, GeneratedObject7> insiderTransactions,
            ESGScores eSGScores,
            OutstandingShares outstandingShares,
            Earnings earnings,
            Financials financials) {
        this.general = general;
        this.highlights = highlights;
        this.valuation = valuation;
        this.sharesStats = sharesStats;
        this.technicals = technicals;
        this.splitsDividends = splitsDividends;
        this.analystRatings = analystRatings;
        this.holders = holders;
        this.insiderTransactions = insiderTransactions;
        this.eSGScores = eSGScores;
        this.outstandingShares = outstandingShares;
        this.earnings = earnings;
        this.financials = financials;
    }

    /**
     * Getter for General.
     * @return Returns the General
     */
    @JsonGetter("General")
    public General getGeneral() {
        return general;
    }

    /**
     * Setter for General.
     * @param general Value for General
     */
    @JsonSetter("General")
    public void setGeneral(General general) {
        this.general = general;
    }

    /**
     * Getter for Highlights.
     * @return Returns the Highlights
     */
    @JsonGetter("Highlights")
    public Highlights getHighlights() {
        return highlights;
    }

    /**
     * Setter for Highlights.
     * @param highlights Value for Highlights
     */
    @JsonSetter("Highlights")
    public void setHighlights(Highlights highlights) {
        this.highlights = highlights;
    }

    /**
     * Getter for Valuation.
     * @return Returns the Valuation
     */
    @JsonGetter("Valuation")
    public Valuation getValuation() {
        return valuation;
    }

    /**
     * Setter for Valuation.
     * @param valuation Value for Valuation
     */
    @JsonSetter("Valuation")
    public void setValuation(Valuation valuation) {
        this.valuation = valuation;
    }

    /**
     * Getter for SharesStats.
     * @return Returns the SharesStats
     */
    @JsonGetter("SharesStats")
    public SharesStats getSharesStats() {
        return sharesStats;
    }

    /**
     * Setter for SharesStats.
     * @param sharesStats Value for SharesStats
     */
    @JsonSetter("SharesStats")
    public void setSharesStats(SharesStats sharesStats) {
        this.sharesStats = sharesStats;
    }

    /**
     * Getter for Technicals.
     * @return Returns the Technicals
     */
    @JsonGetter("Technicals")
    public Technicals getTechnicals() {
        return technicals;
    }

    /**
     * Setter for Technicals.
     * @param technicals Value for Technicals
     */
    @JsonSetter("Technicals")
    public void setTechnicals(Technicals technicals) {
        this.technicals = technicals;
    }

    /**
     * Getter for SplitsDividends.
     * @return Returns the SplitsDividends
     */
    @JsonGetter("SplitsDividends")
    public SplitsDividends getSplitsDividends() {
        return splitsDividends;
    }

    /**
     * Setter for SplitsDividends.
     * @param splitsDividends Value for SplitsDividends
     */
    @JsonSetter("SplitsDividends")
    public void setSplitsDividends(SplitsDividends splitsDividends) {
        this.splitsDividends = splitsDividends;
    }

    /**
     * Getter for AnalystRatings.
     * @return Returns the AnalystRatings
     */
    @JsonGetter("AnalystRatings")
    public AnalystRatings getAnalystRatings() {
        return analystRatings;
    }

    /**
     * Setter for AnalystRatings.
     * @param analystRatings Value for AnalystRatings
     */
    @JsonSetter("AnalystRatings")
    public void setAnalystRatings(AnalystRatings analystRatings) {
        this.analystRatings = analystRatings;
    }

    /**
     * Getter for Holders.
     * @return Returns the Holders
     */
    @JsonGetter("Holders")
    public Holders getHolders() {
        return holders;
    }

    /**
     * Setter for Holders.
     * @param holders Value for Holders
     */
    @JsonSetter("Holders")
    public void setHolders(Holders holders) {
        this.holders = holders;
    }

    /**
     * Getter for InsiderTransactions.
     * @return Returns the Map of String, GeneratedObject7
     */
    @JsonGetter("InsiderTransactions")
    public Map<String, GeneratedObject7> getInsiderTransactions() {
        return insiderTransactions;
    }

    /**
     * Setter for InsiderTransactions.
     * @param insiderTransactions Value for Map of String, GeneratedObject7
     */
    @JsonSetter("InsiderTransactions")
    public void setInsiderTransactions(Map<String, GeneratedObject7> insiderTransactions) {
        this.insiderTransactions = insiderTransactions;
    }

    /**
     * Getter for ESGScores.
     * @return Returns the ESGScores
     */
    @JsonGetter("ESGScores")
    public ESGScores getESGScores() {
        return eSGScores;
    }

    /**
     * Setter for ESGScores.
     * @param eSGScores Value for ESGScores
     */
    @JsonSetter("ESGScores")
    public void setESGScores(ESGScores eSGScores) {
        this.eSGScores = eSGScores;
    }

    /**
     * Getter for OutstandingShares.
     * @return Returns the OutstandingShares
     */
    @JsonGetter("outstandingShares")
    public OutstandingShares getOutstandingShares() {
        return outstandingShares;
    }

    /**
     * Setter for OutstandingShares.
     * @param outstandingShares Value for OutstandingShares
     */
    @JsonSetter("outstandingShares")
    public void setOutstandingShares(OutstandingShares outstandingShares) {
        this.outstandingShares = outstandingShares;
    }

    /**
     * Getter for Earnings.
     * @return Returns the Earnings
     */
    @JsonGetter("Earnings")
    public Earnings getEarnings() {
        return earnings;
    }

    /**
     * Setter for Earnings.
     * @param earnings Value for Earnings
     */
    @JsonSetter("Earnings")
    public void setEarnings(Earnings earnings) {
        this.earnings = earnings;
    }

    /**
     * Getter for Financials.
     * @return Returns the Financials
     */
    @JsonGetter("Financials")
    public Financials getFinancials() {
        return financials;
    }

    /**
     * Setter for Financials.
     * @param financials Value for Financials
     */
    @JsonSetter("Financials")
    public void setFinancials(Financials financials) {
        this.financials = financials;
    }

    /**
     * Converts this FundamentalResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "FundamentalResponse [" + "general=" + general + ", highlights=" + highlights
                + ", valuation=" + valuation + ", sharesStats=" + sharesStats + ", technicals="
                + technicals + ", splitsDividends=" + splitsDividends + ", analystRatings="
                + analystRatings + ", holders=" + holders + ", insiderTransactions="
                + insiderTransactions + ", eSGScores=" + eSGScores + ", outstandingShares="
                + outstandingShares + ", earnings=" + earnings + ", financials=" + financials + "]";
    }

    /**
     * Builds a new {@link FundamentalResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link FundamentalResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(general, highlights, valuation, sharesStats, technicals,
                splitsDividends, analystRatings, holders, insiderTransactions, eSGScores,
                outstandingShares, earnings, financials);
        return builder;
    }

    /**
     * Class to build instances of {@link FundamentalResponse}.
     */
    public static class Builder {
        private General general;
        private Highlights highlights;
        private Valuation valuation;
        private SharesStats sharesStats;
        private Technicals technicals;
        private SplitsDividends splitsDividends;
        private AnalystRatings analystRatings;
        private Holders holders;
        private Map<String, GeneratedObject7> insiderTransactions;
        private ESGScores eSGScores;
        private OutstandingShares outstandingShares;
        private Earnings earnings;
        private Financials financials;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  general  General value for general.
         * @param  highlights  Highlights value for highlights.
         * @param  valuation  Valuation value for valuation.
         * @param  sharesStats  SharesStats value for sharesStats.
         * @param  technicals  Technicals value for technicals.
         * @param  splitsDividends  SplitsDividends value for splitsDividends.
         * @param  analystRatings  AnalystRatings value for analystRatings.
         * @param  holders  Holders value for holders.
         * @param  insiderTransactions  Map of String, value for insiderTransactions.
         * @param  eSGScores  ESGScores value for eSGScores.
         * @param  outstandingShares  OutstandingShares value for outstandingShares.
         * @param  earnings  Earnings value for earnings.
         * @param  financials  Financials value for financials.
         */
        public Builder(General general, Highlights highlights, Valuation valuation,
                SharesStats sharesStats, Technicals technicals, SplitsDividends splitsDividends,
                AnalystRatings analystRatings, Holders holders,
                Map<String, GeneratedObject7> insiderTransactions, ESGScores eSGScores,
                OutstandingShares outstandingShares, Earnings earnings, Financials financials) {
            this.general = general;
            this.highlights = highlights;
            this.valuation = valuation;
            this.sharesStats = sharesStats;
            this.technicals = technicals;
            this.splitsDividends = splitsDividends;
            this.analystRatings = analystRatings;
            this.holders = holders;
            this.insiderTransactions = insiderTransactions;
            this.eSGScores = eSGScores;
            this.outstandingShares = outstandingShares;
            this.earnings = earnings;
            this.financials = financials;
        }

        /**
         * Setter for general.
         * @param  general  General value for general.
         * @return Builder
         */
        public Builder general(General general) {
            this.general = general;
            return this;
        }

        /**
         * Setter for highlights.
         * @param  highlights  Highlights value for highlights.
         * @return Builder
         */
        public Builder highlights(Highlights highlights) {
            this.highlights = highlights;
            return this;
        }

        /**
         * Setter for valuation.
         * @param  valuation  Valuation value for valuation.
         * @return Builder
         */
        public Builder valuation(Valuation valuation) {
            this.valuation = valuation;
            return this;
        }

        /**
         * Setter for sharesStats.
         * @param  sharesStats  SharesStats value for sharesStats.
         * @return Builder
         */
        public Builder sharesStats(SharesStats sharesStats) {
            this.sharesStats = sharesStats;
            return this;
        }

        /**
         * Setter for technicals.
         * @param  technicals  Technicals value for technicals.
         * @return Builder
         */
        public Builder technicals(Technicals technicals) {
            this.technicals = technicals;
            return this;
        }

        /**
         * Setter for splitsDividends.
         * @param  splitsDividends  SplitsDividends value for splitsDividends.
         * @return Builder
         */
        public Builder splitsDividends(SplitsDividends splitsDividends) {
            this.splitsDividends = splitsDividends;
            return this;
        }

        /**
         * Setter for analystRatings.
         * @param  analystRatings  AnalystRatings value for analystRatings.
         * @return Builder
         */
        public Builder analystRatings(AnalystRatings analystRatings) {
            this.analystRatings = analystRatings;
            return this;
        }

        /**
         * Setter for holders.
         * @param  holders  Holders value for holders.
         * @return Builder
         */
        public Builder holders(Holders holders) {
            this.holders = holders;
            return this;
        }

        /**
         * Setter for insiderTransactions.
         * @param  insiderTransactions  Map of String, value for insiderTransactions.
         * @return Builder
         */
        public Builder insiderTransactions(Map<String, GeneratedObject7> insiderTransactions) {
            this.insiderTransactions = insiderTransactions;
            return this;
        }

        /**
         * Setter for eSGScores.
         * @param  eSGScores  ESGScores value for eSGScores.
         * @return Builder
         */
        public Builder eSGScores(ESGScores eSGScores) {
            this.eSGScores = eSGScores;
            return this;
        }

        /**
         * Setter for outstandingShares.
         * @param  outstandingShares  OutstandingShares value for outstandingShares.
         * @return Builder
         */
        public Builder outstandingShares(OutstandingShares outstandingShares) {
            this.outstandingShares = outstandingShares;
            return this;
        }

        /**
         * Setter for earnings.
         * @param  earnings  Earnings value for earnings.
         * @return Builder
         */
        public Builder earnings(Earnings earnings) {
            this.earnings = earnings;
            return this;
        }

        /**
         * Setter for financials.
         * @param  financials  Financials value for financials.
         * @return Builder
         */
        public Builder financials(Financials financials) {
            this.financials = financials;
            return this;
        }

        /**
         * Builds a new {@link FundamentalResponse} object using the set fields.
         * @return {@link FundamentalResponse}
         */
        public FundamentalResponse build() {
            return new FundamentalResponse(general, highlights, valuation, sharesStats, technicals,
                    splitsDividends, analystRatings, holders, insiderTransactions, eSGScores,
                    outstandingShares, earnings, financials);
        }
    }
}
